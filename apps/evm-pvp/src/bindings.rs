// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_register_routes_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::register_routes();
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_network_add_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::network_add(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_network_set_chain_id_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::network_set_chain_id(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_network_set_gas_price_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::network_set_gas_price(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_networks_all_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::networks_all(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallet_add_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallet_add(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallet_add_network_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallet_add_network(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallet_lock_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallet_lock(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallet_unlock_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallet_unlock(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallet_address_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallet_address(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallet_secret_key_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallet_secret_key(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallet_public_key_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallet_public_key(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallet_balance_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallet_balance(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallet_networks_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallet_networks(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallet_transfer_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallet_transfer(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallet_deploy_contract_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallet_deploy_contract(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallet_call_contract_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallet_call_contract(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallets_all_for_user_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallets_all_for_user(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_wallets_all_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::wallets_all(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_user_add_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::user_add(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_user_get_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::user_get(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_user_add_wallet_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::user_add_wallet(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_users_all_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::users_all(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_transaction_add_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::transaction_add(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_transaction_get_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::transaction_get(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_transaction_commit_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::transaction_commit(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_transaction_apply_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::transaction_apply(_rt::string_lift(bytes0));
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_transactions_all_for_user_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    T::transactions_all_for_user(_rt::string_lift(bytes0));
}
pub trait Guest {
    fn register_routes();
    fn network_add(cmd: _rt::String);
    fn network_set_chain_id(cmd: _rt::String);
    fn network_set_gas_price(cmd: _rt::String);
    fn networks_all(cmd: _rt::String);
    fn wallet_add(cmd: _rt::String);
    fn wallet_add_network(cmd: _rt::String);
    fn wallet_lock(cmd: _rt::String);
    fn wallet_unlock(cmd: _rt::String);
    fn wallet_address(cmd: _rt::String);
    fn wallet_secret_key(cmd: _rt::String);
    fn wallet_public_key(cmd: _rt::String);
    fn wallet_balance(cmd: _rt::String);
    fn wallet_networks(cmd: _rt::String);
    fn wallet_transfer(cmd: _rt::String);
    fn wallet_deploy_contract(cmd: _rt::String);
    fn wallet_call_contract(cmd: _rt::String);
    fn wallets_all_for_user(cmd: _rt::String);
    fn wallets_all(cmd: _rt::String);
    fn user_add(cmd: _rt::String);
    fn user_get(cmd: _rt::String);
    fn user_add_wallet(cmd: _rt::String);
    fn users_all(cmd: _rt::String);
    fn transaction_add(cmd: _rt::String);
    fn transaction_get(cmd: _rt::String);
    fn transaction_commit(cmd: _rt::String);
    fn transaction_apply(cmd: _rt::String);
    fn transactions_all_for_user(cmd: _rt::String);
}
#[doc(hidden)]
macro_rules! __export_world_evm_pvp_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[export_name = "register-routes"] unsafe extern "C" fn
        export_register_routes() { $($path_to_types)*::
        _export_register_routes_cabi::<$ty > () } #[export_name = "network-add"] unsafe
        extern "C" fn export_network_add(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_network_add_cabi::<$ty > (arg0, arg1) }
        #[export_name = "network-set-chain-id"] unsafe extern "C" fn
        export_network_set_chain_id(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_network_set_chain_id_cabi::<$ty > (arg0, arg1) }
        #[export_name = "network-set-gas-price"] unsafe extern "C" fn
        export_network_set_gas_price(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_network_set_gas_price_cabi::<$ty > (arg0, arg1) }
        #[export_name = "networks-all"] unsafe extern "C" fn export_networks_all(arg0 : *
        mut u8, arg1 : usize,) { $($path_to_types)*:: _export_networks_all_cabi::<$ty >
        (arg0, arg1) } #[export_name = "wallet-add"] unsafe extern "C" fn
        export_wallet_add(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_wallet_add_cabi::<$ty > (arg0, arg1) } #[export_name =
        "wallet-add-network"] unsafe extern "C" fn export_wallet_add_network(arg0 : * mut
        u8, arg1 : usize,) { $($path_to_types)*:: _export_wallet_add_network_cabi::<$ty >
        (arg0, arg1) } #[export_name = "wallet-lock"] unsafe extern "C" fn
        export_wallet_lock(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_wallet_lock_cabi::<$ty > (arg0, arg1) } #[export_name = "wallet-unlock"]
        unsafe extern "C" fn export_wallet_unlock(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_wallet_unlock_cabi::<$ty > (arg0, arg1) }
        #[export_name = "wallet-address"] unsafe extern "C" fn export_wallet_address(arg0
        : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_wallet_address_cabi::<$ty > (arg0, arg1) } #[export_name =
        "wallet-secret-key"] unsafe extern "C" fn export_wallet_secret_key(arg0 : * mut
        u8, arg1 : usize,) { $($path_to_types)*:: _export_wallet_secret_key_cabi::<$ty >
        (arg0, arg1) } #[export_name = "wallet-public-key"] unsafe extern "C" fn
        export_wallet_public_key(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_wallet_public_key_cabi::<$ty > (arg0, arg1) } #[export_name =
        "wallet-balance"] unsafe extern "C" fn export_wallet_balance(arg0 : * mut u8,
        arg1 : usize,) { $($path_to_types)*:: _export_wallet_balance_cabi::<$ty > (arg0,
        arg1) } #[export_name = "wallet-networks"] unsafe extern "C" fn
        export_wallet_networks(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_wallet_networks_cabi::<$ty > (arg0, arg1) } #[export_name =
        "wallet-transfer"] unsafe extern "C" fn export_wallet_transfer(arg0 : * mut u8,
        arg1 : usize,) { $($path_to_types)*:: _export_wallet_transfer_cabi::<$ty > (arg0,
        arg1) } #[export_name = "wallet-deploy-contract"] unsafe extern "C" fn
        export_wallet_deploy_contract(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_wallet_deploy_contract_cabi::<$ty > (arg0, arg1) }
        #[export_name = "wallet-call-contract"] unsafe extern "C" fn
        export_wallet_call_contract(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_wallet_call_contract_cabi::<$ty > (arg0, arg1) }
        #[export_name = "wallets-all-for-user"] unsafe extern "C" fn
        export_wallets_all_for_user(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_wallets_all_for_user_cabi::<$ty > (arg0, arg1) }
        #[export_name = "wallets-all"] unsafe extern "C" fn export_wallets_all(arg0 : *
        mut u8, arg1 : usize,) { $($path_to_types)*:: _export_wallets_all_cabi::<$ty >
        (arg0, arg1) } #[export_name = "user-add"] unsafe extern "C" fn
        export_user_add(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_user_add_cabi::<$ty > (arg0, arg1) } #[export_name = "user-get"] unsafe
        extern "C" fn export_user_get(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_user_get_cabi::<$ty > (arg0, arg1) } #[export_name =
        "user-add-wallet"] unsafe extern "C" fn export_user_add_wallet(arg0 : * mut u8,
        arg1 : usize,) { $($path_to_types)*:: _export_user_add_wallet_cabi::<$ty > (arg0,
        arg1) } #[export_name = "users-all"] unsafe extern "C" fn export_users_all(arg0 :
        * mut u8, arg1 : usize,) { $($path_to_types)*:: _export_users_all_cabi::<$ty >
        (arg0, arg1) } #[export_name = "transaction-add"] unsafe extern "C" fn
        export_transaction_add(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_transaction_add_cabi::<$ty > (arg0, arg1) } #[export_name =
        "transaction-get"] unsafe extern "C" fn export_transaction_get(arg0 : * mut u8,
        arg1 : usize,) { $($path_to_types)*:: _export_transaction_get_cabi::<$ty > (arg0,
        arg1) } #[export_name = "transaction-commit"] unsafe extern "C" fn
        export_transaction_commit(arg0 : * mut u8, arg1 : usize,) { $($path_to_types)*::
        _export_transaction_commit_cabi::<$ty > (arg0, arg1) } #[export_name =
        "transaction-apply"] unsafe extern "C" fn export_transaction_apply(arg0 : * mut
        u8, arg1 : usize,) { $($path_to_types)*:: _export_transaction_apply_cabi::<$ty >
        (arg0, arg1) } #[export_name = "transactions-all-for-user"] unsafe extern "C" fn
        export_transactions_all_for_user(arg0 : * mut u8, arg1 : usize,) {
        $($path_to_types)*:: _export_transactions_all_for_user_cabi::<$ty > (arg0, arg1)
        } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_evm_pvp_cabi;
#[rustfmt::skip]
mod _rt {
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::string::String;
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_evm_pvp_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_evm_pvp_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_evm_pvp_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:component:evm-pvp:evm-pvp:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 743] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xe9\x04\x01A\x02\x01\
A\x1e\x01@\0\x01\0\x04\0\x0fregister-routes\x01\0\x01@\x01\x03cmds\x01\0\x04\0\x0b\
network-add\x01\x01\x04\0\x14network-set-chain-id\x01\x01\x04\0\x15network-set-g\
as-price\x01\x01\x04\0\x0cnetworks-all\x01\x01\x04\0\x0awallet-add\x01\x01\x04\0\
\x12wallet-add-network\x01\x01\x04\0\x0bwallet-lock\x01\x01\x04\0\x0dwallet-unlo\
ck\x01\x01\x04\0\x0ewallet-address\x01\x01\x04\0\x11wallet-secret-key\x01\x01\x04\
\0\x11wallet-public-key\x01\x01\x04\0\x0ewallet-balance\x01\x01\x04\0\x0fwallet-\
networks\x01\x01\x04\0\x0fwallet-transfer\x01\x01\x04\0\x16wallet-deploy-contrac\
t\x01\x01\x04\0\x14wallet-call-contract\x01\x01\x04\0\x14wallets-all-for-user\x01\
\x01\x04\0\x0bwallets-all\x01\x01\x04\0\x08user-add\x01\x01\x04\0\x08user-get\x01\
\x01\x04\0\x0fuser-add-wallet\x01\x01\x04\0\x09users-all\x01\x01\x04\0\x0ftransa\
ction-add\x01\x01\x04\0\x0ftransaction-get\x01\x01\x04\0\x12transaction-commit\x01\
\x01\x04\0\x11transaction-apply\x01\x01\x04\0\x19transactions-all-for-user\x01\x01\
\x04\0\x19component:evm-pvp/evm-pvp\x04\0\x0b\x0d\x01\0\x07evm-pvp\x03\0\0\0G\x09\
producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.220.1\x10wit-bindgen-rus\
t\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
